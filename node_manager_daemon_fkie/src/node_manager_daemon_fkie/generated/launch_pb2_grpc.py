# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import launch_pb2 as launch__pb2


class LaunchServiceStub(object):
  """The launch manager service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLoadedFiles = channel.unary_stream(
        '/node_manager_daemon_fkie.LaunchService/GetLoadedFiles',
        request_serializer=launch__pb2.Empty.SerializeToString,
        response_deserializer=launch__pb2.LoadedFile.FromString,
        )
    self.LoadLaunch = channel.unary_unary(
        '/node_manager_daemon_fkie.LaunchService/LoadLaunch',
        request_serializer=launch__pb2.LoadLaunchRequest.SerializeToString,
        response_deserializer=launch__pb2.LoadLaunchReply.FromString,
        )
    self.ReloadLaunch = channel.unary_unary(
        '/node_manager_daemon_fkie.LaunchService/ReloadLaunch',
        request_serializer=launch__pb2.LaunchFile.SerializeToString,
        response_deserializer=launch__pb2.LoadLaunchReply.FromString,
        )
    self.UnloadLaunch = channel.unary_unary(
        '/node_manager_daemon_fkie.LaunchService/UnloadLaunch',
        request_serializer=launch__pb2.LaunchFile.SerializeToString,
        response_deserializer=launch__pb2.LoadLaunchReply.FromString,
        )
    self.GetNodes = channel.unary_stream(
        '/node_manager_daemon_fkie.LaunchService/GetNodes',
        request_serializer=launch__pb2.ListNodesRequest.SerializeToString,
        response_deserializer=launch__pb2.LaunchContent.FromString,
        )
    self.StartNode = channel.stream_stream(
        '/node_manager_daemon_fkie.LaunchService/StartNode',
        request_serializer=launch__pb2.Node.SerializeToString,
        response_deserializer=launch__pb2.StartNodeReply.FromString,
        )
    self.StartStandaloneNode = channel.unary_unary(
        '/node_manager_daemon_fkie.LaunchService/StartStandaloneNode',
        request_serializer=launch__pb2.StartConfig.SerializeToString,
        response_deserializer=launch__pb2.StartNodeReply.FromString,
        )
    self.GetIncludedFiles = channel.unary_stream(
        '/node_manager_daemon_fkie.LaunchService/GetIncludedFiles',
        request_serializer=launch__pb2.IncludedFilesRequest.SerializeToString,
        response_deserializer=launch__pb2.IncludedFilesReply.FromString,
        )
    self.GetMtime = channel.unary_unary(
        '/node_manager_daemon_fkie.LaunchService/GetMtime',
        request_serializer=launch__pb2.LaunchFile.SerializeToString,
        response_deserializer=launch__pb2.MtimeReply.FromString,
        )


class LaunchServiceServicer(object):
  """The launch manager service definition.
  """

  def GetLoadedFiles(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def LoadLaunch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReloadLaunch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnloadLaunch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetNodes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartNode(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartStandaloneNode(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetIncludedFiles(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetMtime(self, request, context):
    """	rpc GetChangedBinaries (Empty) returns (Empty);
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LaunchServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLoadedFiles': grpc.unary_stream_rpc_method_handler(
          servicer.GetLoadedFiles,
          request_deserializer=launch__pb2.Empty.FromString,
          response_serializer=launch__pb2.LoadedFile.SerializeToString,
      ),
      'LoadLaunch': grpc.unary_unary_rpc_method_handler(
          servicer.LoadLaunch,
          request_deserializer=launch__pb2.LoadLaunchRequest.FromString,
          response_serializer=launch__pb2.LoadLaunchReply.SerializeToString,
      ),
      'ReloadLaunch': grpc.unary_unary_rpc_method_handler(
          servicer.ReloadLaunch,
          request_deserializer=launch__pb2.LaunchFile.FromString,
          response_serializer=launch__pb2.LoadLaunchReply.SerializeToString,
      ),
      'UnloadLaunch': grpc.unary_unary_rpc_method_handler(
          servicer.UnloadLaunch,
          request_deserializer=launch__pb2.LaunchFile.FromString,
          response_serializer=launch__pb2.LoadLaunchReply.SerializeToString,
      ),
      'GetNodes': grpc.unary_stream_rpc_method_handler(
          servicer.GetNodes,
          request_deserializer=launch__pb2.ListNodesRequest.FromString,
          response_serializer=launch__pb2.LaunchContent.SerializeToString,
      ),
      'StartNode': grpc.stream_stream_rpc_method_handler(
          servicer.StartNode,
          request_deserializer=launch__pb2.Node.FromString,
          response_serializer=launch__pb2.StartNodeReply.SerializeToString,
      ),
      'StartStandaloneNode': grpc.unary_unary_rpc_method_handler(
          servicer.StartStandaloneNode,
          request_deserializer=launch__pb2.StartConfig.FromString,
          response_serializer=launch__pb2.StartNodeReply.SerializeToString,
      ),
      'GetIncludedFiles': grpc.unary_stream_rpc_method_handler(
          servicer.GetIncludedFiles,
          request_deserializer=launch__pb2.IncludedFilesRequest.FromString,
          response_serializer=launch__pb2.IncludedFilesReply.SerializeToString,
      ),
      'GetMtime': grpc.unary_unary_rpc_method_handler(
          servicer.GetMtime,
          request_deserializer=launch__pb2.LaunchFile.FromString,
          response_serializer=launch__pb2.MtimeReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'node_manager_daemon_fkie.LaunchService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
