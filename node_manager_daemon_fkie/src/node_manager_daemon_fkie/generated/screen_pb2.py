# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: screen.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='screen.proto',
  package='fkie_node_manager_daemon.screen',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x0cscreen.proto\x12\x1f\x66kie_node_manager_daemon.screen\"\x07\n\x05\x45mpty\"C\n\x07Screens\x12\x38\n\x07screens\x18\x01 \x03(\x0b\x32\'.fkie_node_manager_daemon.screen.Screen\"$\n\x06Screen\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04node\x18\x02 \x01(\t2\xbb\x02\n\rScreenService\x12_\n\nGetScreens\x12\'.fkie_node_manager_daemon.screen.Screen\x1a(.fkie_node_manager_daemon.screen.Screens\x12\x61\n\rGetAllScreens\x12&.fkie_node_manager_daemon.screen.Empty\x1a(.fkie_node_manager_daemon.screen.Screens\x12\x66\n\x12GetMultipleScreens\x12&.fkie_node_manager_daemon.screen.Empty\x1a(.fkie_node_manager_daemon.screen.Screensb\x06proto3')
)




_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='fkie_node_manager_daemon.screen.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=49,
  serialized_end=56,
)


_SCREENS = _descriptor.Descriptor(
  name='Screens',
  full_name='fkie_node_manager_daemon.screen.Screens',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='screens', full_name='fkie_node_manager_daemon.screen.Screens.screens', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=58,
  serialized_end=125,
)


_SCREEN = _descriptor.Descriptor(
  name='Screen',
  full_name='fkie_node_manager_daemon.screen.Screen',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='fkie_node_manager_daemon.screen.Screen.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='node', full_name='fkie_node_manager_daemon.screen.Screen.node', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=127,
  serialized_end=163,
)

_SCREENS.fields_by_name['screens'].message_type = _SCREEN
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['Screens'] = _SCREENS
DESCRIPTOR.message_types_by_name['Screen'] = _SCREEN
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'screen_pb2'
  # @@protoc_insertion_point(class_scope:fkie_node_manager_daemon.screen.Empty)
  ))
_sym_db.RegisterMessage(Empty)

Screens = _reflection.GeneratedProtocolMessageType('Screens', (_message.Message,), dict(
  DESCRIPTOR = _SCREENS,
  __module__ = 'screen_pb2'
  # @@protoc_insertion_point(class_scope:fkie_node_manager_daemon.screen.Screens)
  ))
_sym_db.RegisterMessage(Screens)

Screen = _reflection.GeneratedProtocolMessageType('Screen', (_message.Message,), dict(
  DESCRIPTOR = _SCREEN,
  __module__ = 'screen_pb2'
  # @@protoc_insertion_point(class_scope:fkie_node_manager_daemon.screen.Screen)
  ))
_sym_db.RegisterMessage(Screen)



_SCREENSERVICE = _descriptor.ServiceDescriptor(
  name='ScreenService',
  full_name='fkie_node_manager_daemon.screen.ScreenService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=166,
  serialized_end=481,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetScreens',
    full_name='fkie_node_manager_daemon.screen.ScreenService.GetScreens',
    index=0,
    containing_service=None,
    input_type=_SCREEN,
    output_type=_SCREENS,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetAllScreens',
    full_name='fkie_node_manager_daemon.screen.ScreenService.GetAllScreens',
    index=1,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SCREENS,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetMultipleScreens',
    full_name='fkie_node_manager_daemon.screen.ScreenService.GetMultipleScreens',
    index=2,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SCREENS,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SCREENSERVICE)

DESCRIPTOR.services_by_name['ScreenService'] = _SCREENSERVICE

# @@protoc_insertion_point(module_scope)
